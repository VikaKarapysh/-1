{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "af7d6a74",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "db6f27f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "fd9d039f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "a12e6138",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('КР-2.xlsx', sheet_name='Вар (6)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "225c885a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Успех</th>\n",
       "      <th>Торговельна площа, кв. м.</th>\n",
       "      <th>Этаж</th>\n",
       "      <th>Количество сотрудников в магазине</th>\n",
       "      <th>Тип</th>\n",
       "      <th>Рейтинг в гуглі</th>\n",
       "      <th>Количество чеков в месяц</th>\n",
       "      <th>Средний чек</th>\n",
       "      <th>Середній дохід наелення,грн</th>\n",
       "      <th>Населення середнє</th>\n",
       "      <th>Фастфуд</th>\n",
       "      <th>Кава на виніс</th>\n",
       "      <th>Піцерія</th>\n",
       "      <th>Магістральна вулиця</th>\n",
       "      <th>Внутрішньоквартальна дорога</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>не успішний</td>\n",
       "      <td>9.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1230.0</td>\n",
       "      <td>76.85</td>\n",
       "      <td>13884.0</td>\n",
       "      <td>3807.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>не успішний</td>\n",
       "      <td>22.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>4.1</td>\n",
       "      <td>2715.0</td>\n",
       "      <td>84.86</td>\n",
       "      <td>11700.0</td>\n",
       "      <td>9086.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>не успішний</td>\n",
       "      <td>13.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>3.0</td>\n",
       "      <td>878.0</td>\n",
       "      <td>112.02</td>\n",
       "      <td>6786.0</td>\n",
       "      <td>6383.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>не успішний</td>\n",
       "      <td>18.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Стандартний</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2346.0</td>\n",
       "      <td>119.80</td>\n",
       "      <td>12948.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>не успішний</td>\n",
       "      <td>25.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2542.0</td>\n",
       "      <td>94.88</td>\n",
       "      <td>11427.0</td>\n",
       "      <td>426.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>успішний</td>\n",
       "      <td>40.78</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Преміальний</td>\n",
       "      <td>4.0</td>\n",
       "      <td>13552.0</td>\n",
       "      <td>107.37</td>\n",
       "      <td>9399.0</td>\n",
       "      <td>12018.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>успішний</td>\n",
       "      <td>21.50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Преміальний</td>\n",
       "      <td>2.3</td>\n",
       "      <td>7598.0</td>\n",
       "      <td>89.13</td>\n",
       "      <td>14079.0</td>\n",
       "      <td>10121.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>не успішний</td>\n",
       "      <td>115.23</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Стандартний</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5431.0</td>\n",
       "      <td>105.62</td>\n",
       "      <td>11427.0</td>\n",
       "      <td>7221.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>не успішний</td>\n",
       "      <td>34.80</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>4.3</td>\n",
       "      <td>4375.0</td>\n",
       "      <td>168.07</td>\n",
       "      <td>13338.0</td>\n",
       "      <td>3137.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>успішний</td>\n",
       "      <td>22.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Преміальний</td>\n",
       "      <td>4.9</td>\n",
       "      <td>7355.0</td>\n",
       "      <td>101.73</td>\n",
       "      <td>10296.0</td>\n",
       "      <td>6623.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>69 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Успех  Торговельна площа, кв. м.  Этаж  \\\n",
       "0   не успішний                       9.00     1   \n",
       "1   не успішний                      22.00     1   \n",
       "2   не успішний                      13.00     1   \n",
       "3   не успішний                      18.00     1   \n",
       "4   не успішний                      25.00     1   \n",
       "..          ...                        ...   ...   \n",
       "64     успішний                      40.78     1   \n",
       "65     успішний                      21.50     1   \n",
       "66  не успішний                     115.23     1   \n",
       "67  не успішний                      34.80     1   \n",
       "68     успішний                      22.00     1   \n",
       "\n",
       "    Количество сотрудников в магазине           Тип  Рейтинг в гуглі  \\\n",
       "0                                    1   Соціальний              3.0   \n",
       "1                                    1   Соціальний              4.1   \n",
       "2                                    1   Соціальний              3.0   \n",
       "3                                    1  Стандартний              3.0   \n",
       "4                                    1   Соціальний              4.0   \n",
       "..                                 ...          ...              ...   \n",
       "64                                   3  Преміальний              4.0   \n",
       "65                                   2  Преміальний              2.3   \n",
       "66                                   1  Стандартний              3.0   \n",
       "67                                   2   Соціальний              4.3   \n",
       "68                                   2  Преміальний              4.9   \n",
       "\n",
       "    Количество чеков в месяц  Средний чек  Середній дохід наелення,грн  \\\n",
       "0                     1230.0        76.85                      13884.0   \n",
       "1                     2715.0        84.86                      11700.0   \n",
       "2                      878.0       112.02                       6786.0   \n",
       "3                     2346.0       119.80                      12948.0   \n",
       "4                     2542.0        94.88                      11427.0   \n",
       "..                       ...          ...                          ...   \n",
       "64                   13552.0       107.37                       9399.0   \n",
       "65                    7598.0        89.13                      14079.0   \n",
       "66                    5431.0       105.62                      11427.0   \n",
       "67                    4375.0       168.07                      13338.0   \n",
       "68                    7355.0       101.73                      10296.0   \n",
       "\n",
       "    Населення середнє  Фастфуд  Кава на виніс  Піцерія  Магістральна вулиця  \\\n",
       "0              3807.0        1              1        0                    1   \n",
       "1              9086.0        0              0        0                    1   \n",
       "2              6383.0        0              0        0                    1   \n",
       "3                 4.0        1              1        1                    1   \n",
       "4               426.0        0              0        0                    0   \n",
       "..                ...      ...            ...      ...                  ...   \n",
       "64            12018.0        0              0        0                    1   \n",
       "65            10121.0        0              0        0                    0   \n",
       "66             7221.0        0              0        0                    1   \n",
       "67             3137.0        0              0        0                    0   \n",
       "68             6623.0        0              0        0                    0   \n",
       "\n",
       "    Внутрішньоквартальна дорога  \n",
       "0                             0  \n",
       "1                             0  \n",
       "2                             0  \n",
       "3                             0  \n",
       "4                             0  \n",
       "..                          ...  \n",
       "64                            1  \n",
       "65                            0  \n",
       "66                            0  \n",
       "67                            0  \n",
       "68                            1  \n",
       "\n",
       "[69 rows x 15 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "eda703b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 69 entries, 0 to 68\n",
      "Data columns (total 15 columns):\n",
      " #   Column                              Non-Null Count  Dtype  \n",
      "---  ------                              --------------  -----  \n",
      " 0   Успех                               69 non-null     object \n",
      " 1   Торговельна площа, кв. м.           69 non-null     float64\n",
      " 2   Этаж                                69 non-null     int64  \n",
      " 3   Количество сотрудников в магазине   69 non-null     int64  \n",
      " 4   Тип                                 69 non-null     object \n",
      " 5   Рейтинг в гуглі                     69 non-null     float64\n",
      " 6   Количество чеков в месяц            62 non-null     float64\n",
      " 7   Средний чек                         62 non-null     float64\n",
      " 8   Середній дохід наелення,грн         64 non-null     float64\n",
      " 9   Населення середнє                   64 non-null     float64\n",
      " 10  Фастфуд                             69 non-null     int64  \n",
      " 11  Кава на виніс                       69 non-null     int64  \n",
      " 12  Піцерія                             69 non-null     int64  \n",
      " 13  Магістральна вулиця                 69 non-null     int64  \n",
      " 14  Внутрішньоквартальна дорога         69 non-null     int64  \n",
      "dtypes: float64(6), int64(7), object(2)\n",
      "memory usage: 8.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "817cc2db",
   "metadata": {},
   "source": [
    " По данной таблице видно, что есть пропущенные значения в следующих факторах: количество чеков в месяц, средний чек, Середній дохід наелення,грн и Населення середнє"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "3f884221",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfm = df\n",
    "\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "kol_ch_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n",
    "dfm[['Количество чеков в месяц']] = kol_ch_mean.fit_transform(dfm[['Количество чеков в месяц']]).round()\n",
    "\n",
    "sr_ch_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n",
    "dfm[['Средний чек']] = sr_ch_mean.fit_transform(dfm[['Средний чек']]).round()\n",
    "\n",
    "\n",
    "nas_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n",
    "dfm[['Середній дохід наелення,грн']] = nas_mean.fit_transform(dfm[['Середній дохід наелення,грн']]).round()\n",
    "\n",
    "cr_d_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n",
    "dfm[['Населення середнє']] = cr_d_mean.fit_transform(dfm[['Населення середнє']]).round()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "da496c4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 69 entries, 0 to 68\n",
      "Data columns (total 15 columns):\n",
      " #   Column                              Non-Null Count  Dtype  \n",
      "---  ------                              --------------  -----  \n",
      " 0   Успех                               69 non-null     object \n",
      " 1   Торговельна площа, кв. м.           69 non-null     float64\n",
      " 2   Этаж                                69 non-null     int64  \n",
      " 3   Количество сотрудников в магазине   69 non-null     int64  \n",
      " 4   Тип                                 69 non-null     object \n",
      " 5   Рейтинг в гуглі                     69 non-null     float64\n",
      " 6   Количество чеков в месяц            69 non-null     float64\n",
      " 7   Средний чек                         69 non-null     float64\n",
      " 8   Середній дохід наелення,грн         69 non-null     float64\n",
      " 9   Населення середнє                   69 non-null     float64\n",
      " 10  Фастфуд                             69 non-null     int64  \n",
      " 11  Кава на виніс                       69 non-null     int64  \n",
      " 12  Піцерія                             69 non-null     int64  \n",
      " 13  Магістральна вулиця                 69 non-null     int64  \n",
      " 14  Внутрішньоквартальна дорога         69 non-null     int64  \n",
      "dtypes: float64(6), int64(7), object(2)\n",
      "memory usage: 8.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "2bfc225f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Торговельна площа, кв. м.'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa2aaf95",
   "metadata": {},
   "source": [
    "По графику видно, что больше 25 значений с нашей выборки имеют торговую площадь 20-30 кв.м.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "1ae9d07a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Этаж'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0ebf0e9",
   "metadata": {},
   "source": [
    "Все магазины расположены на 1ом этаже. Этот показатель мы можем удалить, так как он одинаковый для всех значений даной выборки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "35b0591f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(69, 14)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.drop(['Этаж'], axis='columns', inplace=False)\n",
    "dfr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "980d511b",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Количество сотрудников в магазине'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3079\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3080\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3081\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Количество сотрудников в магазине'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-83-f169639010bd>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Количество сотрудников в магазине'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkind\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'hist'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3022\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3023\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3024\u001b[1;33m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3025\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3026\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3080\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3081\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3082\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3083\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3084\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mtolerance\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Количество сотрудников в магазине'"
     ]
    }
   ],
   "source": [
    "df['Количество сотрудников в магазине'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "285c6a31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Рейтинг в гуглі'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5260986d",
   "metadata": {},
   "source": [
    "Больше 20 объектов имеют рейтинг в гугл - 3,75-4,0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "cc7de1ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Количество чеков в месяц'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71a6b554",
   "metadata": {},
   "source": [
    "По нашей гистограмме видно, что в основном объекты имеют от 1000 до 9000 чеков в месяц"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "06f81060",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Средний чек'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccdb949c",
   "metadata": {},
   "source": [
    "Чаще всего средний чек лежит в пределах от 90 до 110 у.е."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "8ab03b82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Середній дохід наелення,грн'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f76c280",
   "metadata": {},
   "source": [
    "По гистограмме можно сделать вывод, что средний доход населения - 11000-15000 грн"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "f3cd6b00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Населення середнє'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a449167",
   "metadata": {},
   "source": [
    "Среднее население распределилось по гистограмме без больших разрывов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "27e79e43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Торговельна площа, кв. м.</th>\n",
       "      <th>Количество сотрудников в магазине</th>\n",
       "      <th>Рейтинг в гуглі</th>\n",
       "      <th>Количество чеков в месяц</th>\n",
       "      <th>Средний чек</th>\n",
       "      <th>Середній дохід наелення,грн</th>\n",
       "      <th>Населення середнє</th>\n",
       "      <th>Фастфуд</th>\n",
       "      <th>Кава на виніс</th>\n",
       "      <th>Піцерія</th>\n",
       "      <th>Магістральна вулиця</th>\n",
       "      <th>Внутрішньоквартальна дорога</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>69.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>34.872145</td>\n",
       "      <td>1.869565</td>\n",
       "      <td>3.810145</td>\n",
       "      <td>7097.188406</td>\n",
       "      <td>95.942029</td>\n",
       "      <td>11306.855072</td>\n",
       "      <td>6061.289855</td>\n",
       "      <td>0.202899</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>0.449275</td>\n",
       "      <td>0.376812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>21.704293</td>\n",
       "      <td>0.838645</td>\n",
       "      <td>0.695605</td>\n",
       "      <td>4049.160557</td>\n",
       "      <td>18.185227</td>\n",
       "      <td>2347.336283</td>\n",
       "      <td>4244.422753</td>\n",
       "      <td>0.405104</td>\n",
       "      <td>0.415493</td>\n",
       "      <td>0.283836</td>\n",
       "      <td>0.501065</td>\n",
       "      <td>0.488137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>878.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>22.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3734.000000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>10296.000000</td>\n",
       "      <td>1712.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>27.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6810.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>11427.000000</td>\n",
       "      <td>6061.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>41.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>8548.000000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>12948.000000</td>\n",
       "      <td>9213.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>119.300000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>17537.000000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>14937.000000</td>\n",
       "      <td>14157.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Торговельна площа, кв. м.  Количество сотрудников в магазине   \\\n",
       "count                  69.000000                           69.000000   \n",
       "mean                   34.872145                            1.869565   \n",
       "std                    21.704293                            0.838645   \n",
       "min                     4.000000                            1.000000   \n",
       "25%                    22.000000                            1.000000   \n",
       "50%                    27.500000                            2.000000   \n",
       "75%                    41.000000                            2.000000   \n",
       "max                   119.300000                            4.000000   \n",
       "\n",
       "       Рейтинг в гуглі  Количество чеков в месяц  Средний чек  \\\n",
       "count        69.000000                 69.000000    69.000000   \n",
       "mean          3.810145               7097.188406    95.942029   \n",
       "std           0.695605               4049.160557    18.185227   \n",
       "min           1.800000                878.000000    65.000000   \n",
       "25%           3.000000               3734.000000    85.000000   \n",
       "50%           4.000000               6810.000000    95.000000   \n",
       "75%           4.300000               8548.000000   101.000000   \n",
       "max           5.000000              17537.000000   168.000000   \n",
       "\n",
       "       Середній дохід наелення,грн  Населення середнє    Фастфуд  \\\n",
       "count                    69.000000          69.000000  69.000000   \n",
       "mean                  11306.855072        6061.289855   0.202899   \n",
       "std                    2347.336283        4244.422753   0.405104   \n",
       "min                       0.000000           0.000000   0.000000   \n",
       "25%                   10296.000000        1712.000000   0.000000   \n",
       "50%                   11427.000000        6061.000000   0.000000   \n",
       "75%                   12948.000000        9213.000000   0.000000   \n",
       "max                   14937.000000       14157.000000   1.000000   \n",
       "\n",
       "       Кава на виніс    Піцерія  Магістральна вулиця  \\\n",
       "count      69.000000  69.000000            69.000000   \n",
       "mean        0.217391   0.086957             0.449275   \n",
       "std         0.415493   0.283836             0.501065   \n",
       "min         0.000000   0.000000             0.000000   \n",
       "25%         0.000000   0.000000             0.000000   \n",
       "50%         0.000000   0.000000             0.000000   \n",
       "75%         0.000000   0.000000             1.000000   \n",
       "max         1.000000   1.000000             1.000000   \n",
       "\n",
       "       Внутрішньоквартальна дорога  \n",
       "count                    69.000000  \n",
       "mean                      0.376812  \n",
       "std                       0.488137  \n",
       "min                       0.000000  \n",
       "25%                       0.000000  \n",
       "50%                       0.000000  \n",
       "75%                       1.000000  \n",
       "max                       1.000000  "
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fe7c115",
   "metadata": {},
   "source": [
    "В среднем магазины имеют торговую площадь 34.872 кв.м., количество чеков - 7097, а средний доход населения - 11306.85грн. Стандартные отклонения по данным показателям равны 21.7, 4049,16 и 2347.33 соответственно. Минимальные значения для каждого из значений написаны в строке \"min\", а максимальные соответсвенно в строке с названием \"max\". С помощью строки минимальных значений можно сделать вывод, что существует ошибка ввода для значений \"Средний доход населения\" и \"население среднее\", то есть в этих полях есть пропущенные значения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "a19c9b1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def outliers(df):\n",
    "    num_var = list(df._get_numeric_data().columns)\n",
    "    for col_names in num_var:\n",
    "        df[col_names] = df[col_names].apply(lambda y: df[col_names].mean()-3*df[col_names].std() \n",
    "                            if y < df[col_names].mean()-3*df[col_names].std() else y)\n",
    "        df[col_names] = df[col_names].apply(lambda y: df[col_names].mean()+3*df[col_names].std() \n",
    "                            if y > df[col_names].mean()+3*df[col_names].std() else y)\n",
    "    return(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "a64d33c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col</th>\n",
       "      <th>nunique</th>\n",
       "      <th>unique</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Успех</td>\n",
       "      <td>2</td>\n",
       "      <td>[не успішний, успішний]</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Тип</td>\n",
       "      <td>5</td>\n",
       "      <td>[Соціальний, Стандартний, Преміальний, Стандар...</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     col  nunique                                             unique    type\n",
       "1  Успех        2                            [не успішний, успішний]  object\n",
       "0    Тип        5  [Соціальний, Стандартний, Преміальний, Стандар...  object"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 = df[['Тип', 'Успех']]\n",
    "info = []\n",
    "for column in df3.columns:\n",
    "        vals = {\"col\": column,\n",
    "                \"nunique\": df3[column].nunique(),\n",
    "                \"unique\": df3[column].unique(),\n",
    "                \"type\": df3[column].dtype\n",
    "               }\n",
    "        info.append(vals)\n",
    "pd.DataFrame(info).sort_values(by = \"col\", ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "730cffe3",
   "metadata": {},
   "outputs": [],
   "source": [
    "fn = {'не успішний':0, 'успішний':1}\n",
    "df['Успех'] = df['Успех'].map(fn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "acf0c84d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Успех</th>\n",
       "      <th>Торговельна площа, кв. м.</th>\n",
       "      <th>Количество сотрудников в магазине</th>\n",
       "      <th>Тип</th>\n",
       "      <th>Рейтинг в гуглі</th>\n",
       "      <th>Количество чеков в месяц</th>\n",
       "      <th>Средний чек</th>\n",
       "      <th>Середній дохід наелення,грн</th>\n",
       "      <th>Населення середнє</th>\n",
       "      <th>Фастфуд</th>\n",
       "      <th>Кава на виніс</th>\n",
       "      <th>Піцерія</th>\n",
       "      <th>Магістральна вулиця</th>\n",
       "      <th>Внутрішньоквартальна дорога</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>9.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1230.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>13884.0</td>\n",
       "      <td>3807.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>22.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>4.1</td>\n",
       "      <td>2715.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>11700.0</td>\n",
       "      <td>9086.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>13.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>3.0</td>\n",
       "      <td>878.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>6786.0</td>\n",
       "      <td>6383.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>18.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Стандартний</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2346.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>12948.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>25.00</td>\n",
       "      <td>1</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2542.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>11427.0</td>\n",
       "      <td>426.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>1</td>\n",
       "      <td>40.78</td>\n",
       "      <td>3</td>\n",
       "      <td>Преміальний</td>\n",
       "      <td>4.0</td>\n",
       "      <td>13552.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>9399.0</td>\n",
       "      <td>12018.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>1</td>\n",
       "      <td>21.50</td>\n",
       "      <td>2</td>\n",
       "      <td>Преміальний</td>\n",
       "      <td>2.3</td>\n",
       "      <td>7598.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>14079.0</td>\n",
       "      <td>10121.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>0</td>\n",
       "      <td>115.23</td>\n",
       "      <td>1</td>\n",
       "      <td>Стандартний</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5431.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>11427.0</td>\n",
       "      <td>7221.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>0</td>\n",
       "      <td>34.80</td>\n",
       "      <td>2</td>\n",
       "      <td>Соціальний</td>\n",
       "      <td>4.3</td>\n",
       "      <td>4375.0</td>\n",
       "      <td>168.0</td>\n",
       "      <td>13338.0</td>\n",
       "      <td>3137.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>1</td>\n",
       "      <td>22.00</td>\n",
       "      <td>2</td>\n",
       "      <td>Преміальний</td>\n",
       "      <td>4.9</td>\n",
       "      <td>7355.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>10296.0</td>\n",
       "      <td>6623.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>69 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Успех  Торговельна площа, кв. м.  Количество сотрудников в магазине   \\\n",
       "0       0                       9.00                                   1   \n",
       "1       0                      22.00                                   1   \n",
       "2       0                      13.00                                   1   \n",
       "3       0                      18.00                                   1   \n",
       "4       0                      25.00                                   1   \n",
       "..    ...                        ...                                 ...   \n",
       "64      1                      40.78                                   3   \n",
       "65      1                      21.50                                   2   \n",
       "66      0                     115.23                                   1   \n",
       "67      0                      34.80                                   2   \n",
       "68      1                      22.00                                   2   \n",
       "\n",
       "            Тип  Рейтинг в гуглі  Количество чеков в месяц  Средний чек  \\\n",
       "0    Соціальний              3.0                    1230.0         77.0   \n",
       "1    Соціальний              4.1                    2715.0         85.0   \n",
       "2    Соціальний              3.0                     878.0        112.0   \n",
       "3   Стандартний              3.0                    2346.0        120.0   \n",
       "4    Соціальний              4.0                    2542.0         95.0   \n",
       "..          ...              ...                       ...          ...   \n",
       "64  Преміальний              4.0                   13552.0        107.0   \n",
       "65  Преміальний              2.3                    7598.0         89.0   \n",
       "66  Стандартний              3.0                    5431.0        106.0   \n",
       "67   Соціальний              4.3                    4375.0        168.0   \n",
       "68  Преміальний              4.9                    7355.0        102.0   \n",
       "\n",
       "    Середній дохід наелення,грн  Населення середнє  Фастфуд  Кава на виніс  \\\n",
       "0                       13884.0             3807.0        1              1   \n",
       "1                       11700.0             9086.0        0              0   \n",
       "2                        6786.0             6383.0        0              0   \n",
       "3                       12948.0                4.0        1              1   \n",
       "4                       11427.0              426.0        0              0   \n",
       "..                          ...                ...      ...            ...   \n",
       "64                       9399.0            12018.0        0              0   \n",
       "65                      14079.0            10121.0        0              0   \n",
       "66                      11427.0             7221.0        0              0   \n",
       "67                      13338.0             3137.0        0              0   \n",
       "68                      10296.0             6623.0        0              0   \n",
       "\n",
       "    Піцерія  Магістральна вулиця  Внутрішньоквартальна дорога  \n",
       "0         0                    1                            0  \n",
       "1         0                    1                            0  \n",
       "2         0                    1                            0  \n",
       "3         1                    1                            0  \n",
       "4         0                    0                            0  \n",
       "..      ...                  ...                          ...  \n",
       "64        0                    1                            1  \n",
       "65        0                    0                            0  \n",
       "66        0                    1                            0  \n",
       "67        0                    0                            0  \n",
       "68        0                    0                            1  \n",
       "\n",
       "[69 rows x 14 columns]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "85c0b01b",
   "metadata": {},
   "outputs": [],
   "source": [
    "fm = {'Соціальний':0,'Преміальний':1,'Стандартний':2,'Соціальний Плюс':3,'Стандарт Плюс':4}\n",
    "df['Тип'] = df['Тип'].map(fm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "3a4d8d54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Успех</th>\n",
       "      <th>Торговельна площа, кв. м.</th>\n",
       "      <th>Количество сотрудников в магазине</th>\n",
       "      <th>Тип</th>\n",
       "      <th>Рейтинг в гуглі</th>\n",
       "      <th>Количество чеков в месяц</th>\n",
       "      <th>Средний чек</th>\n",
       "      <th>Середній дохід наелення,грн</th>\n",
       "      <th>Населення середнє</th>\n",
       "      <th>Фастфуд</th>\n",
       "      <th>Кава на виніс</th>\n",
       "      <th>Піцерія</th>\n",
       "      <th>Магістральна вулиця</th>\n",
       "      <th>Внутрішньоквартальна дорога</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>9.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1230.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>13884.0</td>\n",
       "      <td>3807.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>22.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.1</td>\n",
       "      <td>2715.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>11700.0</td>\n",
       "      <td>9086.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>13.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>878.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>6786.0</td>\n",
       "      <td>6383.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>18.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2346.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>12948.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>25.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2542.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>11427.0</td>\n",
       "      <td>426.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>1</td>\n",
       "      <td>40.78</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>13552.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>9399.0</td>\n",
       "      <td>12018.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>1</td>\n",
       "      <td>21.50</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2.3</td>\n",
       "      <td>7598.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>14079.0</td>\n",
       "      <td>10121.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>0</td>\n",
       "      <td>115.23</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5431.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>11427.0</td>\n",
       "      <td>7221.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>0</td>\n",
       "      <td>34.80</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>4375.0</td>\n",
       "      <td>168.0</td>\n",
       "      <td>13338.0</td>\n",
       "      <td>3137.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>1</td>\n",
       "      <td>22.00</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.9</td>\n",
       "      <td>7355.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>10296.0</td>\n",
       "      <td>6623.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>69 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Успех  Торговельна площа, кв. м.  Количество сотрудников в магазине   Тип  \\\n",
       "0       0                       9.00                                   1    0   \n",
       "1       0                      22.00                                   1    0   \n",
       "2       0                      13.00                                   1    0   \n",
       "3       0                      18.00                                   1    2   \n",
       "4       0                      25.00                                   1    0   \n",
       "..    ...                        ...                                 ...  ...   \n",
       "64      1                      40.78                                   3    1   \n",
       "65      1                      21.50                                   2    1   \n",
       "66      0                     115.23                                   1    2   \n",
       "67      0                      34.80                                   2    0   \n",
       "68      1                      22.00                                   2    1   \n",
       "\n",
       "    Рейтинг в гуглі  Количество чеков в месяц  Средний чек  \\\n",
       "0               3.0                    1230.0         77.0   \n",
       "1               4.1                    2715.0         85.0   \n",
       "2               3.0                     878.0        112.0   \n",
       "3               3.0                    2346.0        120.0   \n",
       "4               4.0                    2542.0         95.0   \n",
       "..              ...                       ...          ...   \n",
       "64              4.0                   13552.0        107.0   \n",
       "65              2.3                    7598.0         89.0   \n",
       "66              3.0                    5431.0        106.0   \n",
       "67              4.3                    4375.0        168.0   \n",
       "68              4.9                    7355.0        102.0   \n",
       "\n",
       "    Середній дохід наелення,грн  Населення середнє  Фастфуд  Кава на виніс  \\\n",
       "0                       13884.0             3807.0        1              1   \n",
       "1                       11700.0             9086.0        0              0   \n",
       "2                        6786.0             6383.0        0              0   \n",
       "3                       12948.0                4.0        1              1   \n",
       "4                       11427.0              426.0        0              0   \n",
       "..                          ...                ...      ...            ...   \n",
       "64                       9399.0            12018.0        0              0   \n",
       "65                      14079.0            10121.0        0              0   \n",
       "66                      11427.0             7221.0        0              0   \n",
       "67                      13338.0             3137.0        0              0   \n",
       "68                      10296.0             6623.0        0              0   \n",
       "\n",
       "    Піцерія  Магістральна вулиця  Внутрішньоквартальна дорога  \n",
       "0         0                    1                            0  \n",
       "1         0                    1                            0  \n",
       "2         0                    1                            0  \n",
       "3         1                    1                            0  \n",
       "4         0                    0                            0  \n",
       "..      ...                  ...                          ...  \n",
       "64        0                    1                            1  \n",
       "65        0                    0                            0  \n",
       "66        0                    1                            0  \n",
       "67        0                    0                            0  \n",
       "68        0                    0                            1  \n",
       "\n",
       "[69 rows x 14 columns]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "9c936ca1",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.iloc[:, 1:]\n",
    "y = df['Успех']\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "33f79c64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Торговельна площа, кв. м.</th>\n",
       "      <th>Количество сотрудников в магазине</th>\n",
       "      <th>Тип</th>\n",
       "      <th>Рейтинг в гуглі</th>\n",
       "      <th>Количество чеков в месяц</th>\n",
       "      <th>Средний чек</th>\n",
       "      <th>Середній дохід наелення,грн</th>\n",
       "      <th>Населення середнє</th>\n",
       "      <th>Фастфуд</th>\n",
       "      <th>Кава на виніс</th>\n",
       "      <th>Піцерія</th>\n",
       "      <th>Магістральна вулиця</th>\n",
       "      <th>Внутрішньоквартальна дорога</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2346.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>12948.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>119.30</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>11747.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>11271.0</td>\n",
       "      <td>1712.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>25.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2542.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>11427.0</td>\n",
       "      <td>426.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>99.50</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4.5</td>\n",
       "      <td>13645.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>11037.0</td>\n",
       "      <td>402.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>33.00</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6810.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>13572.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>34.80</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>4375.0</td>\n",
       "      <td>168.0</td>\n",
       "      <td>13338.0</td>\n",
       "      <td>3137.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>63.40</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4.1</td>\n",
       "      <td>11293.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>13806.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>115.23</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5431.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>11427.0</td>\n",
       "      <td>7221.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>78.05</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7798.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>11700.0</td>\n",
       "      <td>596.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>22.37</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1296.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>7995.0</td>\n",
       "      <td>6629.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>22.00</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.9</td>\n",
       "      <td>7355.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>10296.0</td>\n",
       "      <td>6623.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>40.00</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.2</td>\n",
       "      <td>9115.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>14508.0</td>\n",
       "      <td>9213.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>30.00</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3734.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>11934.0</td>\n",
       "      <td>12790.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>45.00</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4.6</td>\n",
       "      <td>17537.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>8736.0</td>\n",
       "      <td>12359.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>32.00</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4.6</td>\n",
       "      <td>14777.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>11310.0</td>\n",
       "      <td>12261.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>25.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1464.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>14937.0</td>\n",
       "      <td>5275.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>41.00</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4750.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>8424.0</td>\n",
       "      <td>8985.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>40.40</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>8168.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>12363.0</td>\n",
       "      <td>1541.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>21.50</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2.3</td>\n",
       "      <td>7598.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>14079.0</td>\n",
       "      <td>10121.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>45.00</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4.2</td>\n",
       "      <td>14029.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>11076.0</td>\n",
       "      <td>12480.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>20.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7097.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>10686.0</td>\n",
       "      <td>14157.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>49.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4.4</td>\n",
       "      <td>5478.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>11856.0</td>\n",
       "      <td>1618.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>48.50</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7097.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>11307.0</td>\n",
       "      <td>6061.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>18.44</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5934.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>11661.0</td>\n",
       "      <td>246.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>24.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1525.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>12675.0</td>\n",
       "      <td>1401.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>42.54</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6539.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>8346.0</td>\n",
       "      <td>7248.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>65.14</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3642.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>13767.0</td>\n",
       "      <td>3678.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>47.77</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8080.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>11115.0</td>\n",
       "      <td>9174.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>26.40</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.5</td>\n",
       "      <td>6949.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3636.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>40.00</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7097.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>11307.0</td>\n",
       "      <td>6061.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.1</td>\n",
       "      <td>2715.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>11700.0</td>\n",
       "      <td>9086.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>13.70</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2487.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>10764.0</td>\n",
       "      <td>5305.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>25.44</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.4</td>\n",
       "      <td>8938.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>10569.0</td>\n",
       "      <td>10171.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>34.90</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.5</td>\n",
       "      <td>9448.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>9789.0</td>\n",
       "      <td>10126.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>45.00</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4.1</td>\n",
       "      <td>8548.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>11427.0</td>\n",
       "      <td>13541.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3258.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>14118.0</td>\n",
       "      <td>2729.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>24.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3329.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>8151.0</td>\n",
       "      <td>7255.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>34.68</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>14874.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>12090.0</td>\n",
       "      <td>3287.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>60.17</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>12297.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>13104.0</td>\n",
       "      <td>6979.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>22.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.9</td>\n",
       "      <td>5008.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>11115.0</td>\n",
       "      <td>8973.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>25.69</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3.4</td>\n",
       "      <td>13182.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>13143.0</td>\n",
       "      <td>4340.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>35.49</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4.5</td>\n",
       "      <td>6322.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>13455.0</td>\n",
       "      <td>231.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>27.50</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>5968.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>13572.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>50.00</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3.9</td>\n",
       "      <td>7944.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>13611.0</td>\n",
       "      <td>955.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>20.91</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7097.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>13377.0</td>\n",
       "      <td>9548.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>50.00</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7097.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>11307.0</td>\n",
       "      <td>6061.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>11.50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5396.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>12831.0</td>\n",
       "      <td>4420.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>878.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>6786.0</td>\n",
       "      <td>6383.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>26.38</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4.5</td>\n",
       "      <td>14556.0</td>\n",
       "      <td>118.0</td>\n",
       "      <td>10133.0</td>\n",
       "      <td>8595.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>23.42</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4.6</td>\n",
       "      <td>14559.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>6084.0</td>\n",
       "      <td>9170.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>17.42</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.9</td>\n",
       "      <td>3522.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>12792.0</td>\n",
       "      <td>189.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>27.42</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7097.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>11307.0</td>\n",
       "      <td>6061.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>36.88</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4.2</td>\n",
       "      <td>5807.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>12831.0</td>\n",
       "      <td>1607.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>20.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7097.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>8034.0</td>\n",
       "      <td>10861.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>20.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2201.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>11934.0</td>\n",
       "      <td>1464.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Торговельна площа, кв. м.  Количество сотрудников в магазине   Тип  \\\n",
       "3                       18.00                                   1    2   \n",
       "14                     119.30                                   3    1   \n",
       "4                       25.00                                   1    0   \n",
       "29                      99.50                                   4    1   \n",
       "56                      33.00                                   2    3   \n",
       "67                      34.80                                   2    0   \n",
       "23                      63.40                                   4    1   \n",
       "66                     115.23                                   1    2   \n",
       "15                      78.05                                   2    2   \n",
       "51                      22.37                                   2    2   \n",
       "68                      22.00                                   2    1   \n",
       "6                       40.00                                   2    1   \n",
       "33                      30.00                                   2    2   \n",
       "41                      45.00                                   3    1   \n",
       "7                       32.00                                   3    1   \n",
       "57                      25.00                                   1    0   \n",
       "17                      41.00                                   2    2   \n",
       "31                      40.40                                   2    1   \n",
       "65                      21.50                                   2    1   \n",
       "49                      45.00                                   3    1   \n",
       "42                      20.00                                   1    2   \n",
       "5                       49.00                                   1    2   \n",
       "35                      48.50                                   2    0   \n",
       "34                      18.44                                   1    2   \n",
       "60                      24.00                                   1    0   \n",
       "12                      42.54                                   2    1   \n",
       "45                      65.14                                   2    2   \n",
       "28                      47.77                                   2    1   \n",
       "24                      26.40                                   2    1   \n",
       "18                      40.00                                   2    0   \n",
       "1                       22.00                                   1    0   \n",
       "47                      13.70                                   2    0   \n",
       "22                      25.44                                   2    1   \n",
       "59                      34.90                                   2    1   \n",
       "50                      45.00                                   3    1   \n",
       "21                       4.00                                   1    0   \n",
       "19                      24.00                                   1    2   \n",
       "32                      34.68                                   3    1   \n",
       "61                      60.17                                   3    1   \n",
       "63                      22.00                                   1    2   \n",
       "11                      25.69                                   3    1   \n",
       "9                       35.49                                   1    4   \n",
       "10                      27.50                                   1    0   \n",
       "13                      50.00                                   4    1   \n",
       "37                      20.91                                   1    0   \n",
       "54                      50.00                                   2    2   \n",
       "46                      11.50                                   1    2   \n",
       "2                       13.00                                   1    0   \n",
       "62                      26.38                                   3    1   \n",
       "52                      23.42                                   3    1   \n",
       "26                      17.42                                   1    0   \n",
       "58                      27.42                                   1    3   \n",
       "25                      36.88                                   1    1   \n",
       "16                      20.00                                   1    2   \n",
       "48                      20.00                                   1    0   \n",
       "\n",
       "    Рейтинг в гуглі  Количество чеков в месяц  Средний чек  \\\n",
       "3               3.0                    2346.0        120.0   \n",
       "14              4.3                   11747.0         96.0   \n",
       "4               4.0                    2542.0         95.0   \n",
       "29              4.5                   13645.0        140.0   \n",
       "56              4.0                    6810.0         90.0   \n",
       "67              4.3                    4375.0        168.0   \n",
       "23              4.1                   11293.0         95.0   \n",
       "66              3.0                    5431.0        106.0   \n",
       "15              3.0                    7798.0         75.0   \n",
       "51              4.3                    1296.0         80.0   \n",
       "68              4.9                    7355.0        102.0   \n",
       "6               4.2                    9115.0         92.0   \n",
       "33              4.0                    3734.0         88.0   \n",
       "41              4.6                   17537.0        117.0   \n",
       "7               4.6                   14777.0        133.0   \n",
       "57              4.0                    1464.0         83.0   \n",
       "17              4.0                    4750.0         88.0   \n",
       "31              1.8                    8168.0        101.0   \n",
       "65              2.3                    7598.0         89.0   \n",
       "49              4.2                   14029.0        115.0   \n",
       "42              3.0                    7097.0         96.0   \n",
       "5               4.4                    5478.0         81.0   \n",
       "35              4.0                    7097.0         96.0   \n",
       "34              3.0                    5934.0         72.0   \n",
       "60              3.0                    1525.0         97.0   \n",
       "12              4.0                    6539.0         92.0   \n",
       "45              4.0                    3642.0         97.0   \n",
       "28              4.0                    8080.0         98.0   \n",
       "24              4.5                    6949.0        130.0   \n",
       "18              4.0                    7097.0         96.0   \n",
       "1               4.1                    2715.0         85.0   \n",
       "47              3.0                    2487.0         88.0   \n",
       "22              4.4                    8938.0         95.0   \n",
       "59              4.5                    9448.0         96.0   \n",
       "50              4.1                    8548.0        114.0   \n",
       "21              4.5                    3258.0         65.0   \n",
       "19              3.0                    3329.0         87.0   \n",
       "32              3.0                   14874.0         91.0   \n",
       "61              4.0                   12297.0        115.0   \n",
       "63              3.9                    5008.0         99.0   \n",
       "11              3.4                   13182.0        113.0   \n",
       "9               4.5                    6322.0         80.0   \n",
       "10              4.3                    5968.0         77.0   \n",
       "13              3.9                    7944.0         96.0   \n",
       "37              3.0                    7097.0         96.0   \n",
       "54              4.0                    7097.0         96.0   \n",
       "46              3.0                    5396.0         77.0   \n",
       "2               3.0                     878.0        112.0   \n",
       "62              4.5                   14556.0        118.0   \n",
       "52              4.6                   14559.0        133.0   \n",
       "26              3.9                    3522.0         70.0   \n",
       "58              5.0                    7097.0         96.0   \n",
       "25              4.2                    5807.0         93.0   \n",
       "16              3.0                    7097.0         96.0   \n",
       "48              3.9                    2201.0         89.0   \n",
       "\n",
       "    Середній дохід наелення,грн  Населення середнє  Фастфуд  Кава на виніс  \\\n",
       "3                       12948.0                4.0        1              1   \n",
       "14                      11271.0             1712.0        0              0   \n",
       "4                       11427.0              426.0        0              0   \n",
       "29                      11037.0              402.0        0              0   \n",
       "56                      13572.0              256.0        0              0   \n",
       "67                      13338.0             3137.0        0              0   \n",
       "23                      13806.0                0.0        0              1   \n",
       "66                      11427.0             7221.0        0              0   \n",
       "15                      11700.0              596.0        0              0   \n",
       "51                       7995.0             6629.0        0              1   \n",
       "68                      10296.0             6623.0        0              0   \n",
       "6                       14508.0             9213.0        0              0   \n",
       "33                      11934.0            12790.0        0              0   \n",
       "41                       8736.0            12359.0        1              0   \n",
       "7                       11310.0            12261.0        0              1   \n",
       "57                      14937.0             5275.0        1              1   \n",
       "17                       8424.0             8985.0        0              0   \n",
       "31                      12363.0             1541.0        0              0   \n",
       "65                      14079.0            10121.0        0              0   \n",
       "49                      11076.0            12480.0        0              0   \n",
       "42                      10686.0            14157.0        0              0   \n",
       "5                       11856.0             1618.0        1              0   \n",
       "35                      11307.0             6061.0        0              0   \n",
       "34                      11661.0              246.0        0              1   \n",
       "60                      12675.0             1401.0        0              1   \n",
       "12                       8346.0             7248.0        0              0   \n",
       "45                      13767.0             3678.0        0              1   \n",
       "28                      11115.0             9174.0        0              1   \n",
       "24                          0.0             3636.0        0              0   \n",
       "18                      11307.0             6061.0        0              0   \n",
       "1                       11700.0             9086.0        0              0   \n",
       "47                      10764.0             5305.0        1              1   \n",
       "22                      10569.0            10171.0        0              0   \n",
       "59                       9789.0            10126.0        0              0   \n",
       "50                      11427.0            13541.0        0              0   \n",
       "21                      14118.0             2729.0        1              1   \n",
       "19                       8151.0             7255.0        0              0   \n",
       "32                      12090.0             3287.0        0              0   \n",
       "61                      13104.0             6979.0        0              0   \n",
       "63                      11115.0             8973.0        0              0   \n",
       "11                      13143.0             4340.0        0              0   \n",
       "9                       13455.0              231.0        1              1   \n",
       "10                      13572.0              256.0        1              1   \n",
       "13                      13611.0              955.0        1              0   \n",
       "37                      13377.0             9548.0        0              0   \n",
       "54                      11307.0             6061.0        0              0   \n",
       "46                      12831.0             4420.0        0              0   \n",
       "2                        6786.0             6383.0        0              0   \n",
       "62                      10133.0             8595.0        0              0   \n",
       "52                       6084.0             9170.0        0              0   \n",
       "26                      12792.0              189.0        1              0   \n",
       "58                      11307.0             6061.0        0              0   \n",
       "25                      12831.0             1607.0        0              0   \n",
       "16                       8034.0            10861.0        1              0   \n",
       "48                      11934.0             1464.0        0              0   \n",
       "\n",
       "    Піцерія  Магістральна вулиця  Внутрішньоквартальна дорога  \n",
       "3         1                    1                            0  \n",
       "14        0                    1                            0  \n",
       "4         0                    0                            0  \n",
       "29        0                    1                            0  \n",
       "56        0                    0                            0  \n",
       "67        0                    0                            0  \n",
       "23        0                    1                            0  \n",
       "66        0                    1                            0  \n",
       "15        0                    0                            0  \n",
       "51        0                    1                            0  \n",
       "68        0                    0                            1  \n",
       "6         0                    1                            0  \n",
       "33        0                    0                            1  \n",
       "41        0                    1                            0  \n",
       "7         0                    0                            1  \n",
       "57        0                    0                            1  \n",
       "17        0                    0                            1  \n",
       "31        0                    1                            0  \n",
       "65        0                    0                            0  \n",
       "49        0                    0                            1  \n",
       "42        0                    0                            0  \n",
       "5         0                    0                            1  \n",
       "35        0                    0                            0  \n",
       "34        0                    1                            0  \n",
       "60        1                    0                            1  \n",
       "12        0                    0                            1  \n",
       "45        1                    0                            1  \n",
       "28        0                    0                            1  \n",
       "24        0                    0                            1  \n",
       "18        0                    0                            0  \n",
       "1         0                    1                            0  \n",
       "47        0                    1                            0  \n",
       "22        0                    0                            1  \n",
       "59        0                    0                            0  \n",
       "50        0                    0                            1  \n",
       "21        0                    0                            0  \n",
       "19        0                    1                            0  \n",
       "32        0                    1                            0  \n",
       "61        0                    1                            0  \n",
       "63        0                    1                            1  \n",
       "11        0                    1                            1  \n",
       "9         0                    1                            0  \n",
       "10        0                    1                            0  \n",
       "13        0                    1                            0  \n",
       "37        0                    1                            0  \n",
       "54        0                    0                            0  \n",
       "46        0                    0                            0  \n",
       "2         0                    1                            0  \n",
       "62        0                    0                            1  \n",
       "52        0                    0                            0  \n",
       "26        0                    0                            1  \n",
       "58        0                    0                            0  \n",
       "25        0                    1                            0  \n",
       "16        0                    0                            1  \n",
       "48        0                    0                            0  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "2bff0744",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('6_prep.csv', sep=',', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "6ea4bcca",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "sc_X = StandardScaler().fit(X_train)\n",
    "X_train = sc_X.transform(X_train)\n",
    "X_test = sc_X.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31559d16",
   "metadata": {},
   "source": [
    "# Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "363876f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "[False  True False False  True False  True False False False False False\n",
      " False]\n",
      "[ 7  1  8  5  1  9  1  6  2 11  4 10  3]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import RFECV\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "estimator=LogisticRegression(random_state=123)\n",
    "selector=RFECV(estimator, step=1)\n",
    "selector=selector.fit(X_train, y_train)\n",
    "print(selector.n_features_)\n",
    "print(selector.support_)\n",
    "print(selector.ranking_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18fc1c94",
   "metadata": {},
   "source": [
    "Для нашей выборки наиболее влиятельными есть следующие переменные: Количество сотрудников в магазине, Количество чеков в месяц, Середній дохід наелення,грн"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f9bf665",
   "metadata": {},
   "source": [
    "Для следующих действий и анализа необходимо выбрать 2 переменные, которые мы хотим проверить на влияние на успешность даного магазина. Например, количество чеков в месяц и Середній дохід наелення,грн"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "e833616f",
   "metadata": {},
   "outputs": [
    {
     "ename": "PerfectSeparationError",
     "evalue": "Perfect separation detected, results not available",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mPerfectSeparationError\u001b[0m                    Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-101-46bedd883654>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mstatsmodels\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapi\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0msm\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mlr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mLogit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msummary2\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\discrete\\discrete_model.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, start_params, method, maxiter, full_output, disp, callback, **kwargs)\u001b[0m\n\u001b[0;32m   1972\u001b[0m     def fit(self, start_params=None, method='newton', maxiter=35,\n\u001b[0;32m   1973\u001b[0m             full_output=1, disp=1, callback=None, **kwargs):\n\u001b[1;32m-> 1974\u001b[1;33m         bnryfit = super().fit(start_params=start_params,\n\u001b[0m\u001b[0;32m   1975\u001b[0m                               \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1976\u001b[0m                               \u001b[0mmaxiter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmaxiter\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\discrete\\discrete_model.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, start_params, method, maxiter, full_output, disp, callback, **kwargs)\u001b[0m\n\u001b[0;32m    225\u001b[0m             \u001b[1;32mpass\u001b[0m  \u001b[1;31m# TODO: make a function factory to have multiple call-backs\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    226\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 227\u001b[1;33m         mlefit = super().fit(start_params=start_params,\n\u001b[0m\u001b[0;32m    228\u001b[0m                              \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    229\u001b[0m                              \u001b[0mmaxiter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmaxiter\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, start_params, method, maxiter, full_output, disp, fargs, callback, retall, skip_hessian, **kwargs)\u001b[0m\n\u001b[0;32m    517\u001b[0m         \u001b[0mwarn_convergence\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'warn_convergence'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    518\u001b[0m         \u001b[0moptimizer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mOptimizer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 519\u001b[1;33m         xopt, retvals, optim_settings = optimizer._fit(f, score, start_params,\n\u001b[0m\u001b[0;32m    520\u001b[0m                                                        \u001b[0mfargs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    521\u001b[0m                                                        \u001b[0mhessian\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mhess\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\base\\optimizer.py\u001b[0m in \u001b[0;36m_fit\u001b[1;34m(self, objective, gradient, start_params, fargs, kwargs, hessian, method, maxiter, full_output, disp, callback, retall)\u001b[0m\n\u001b[0;32m    222\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    223\u001b[0m         \u001b[0mfunc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfit_funcs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mmethod\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 224\u001b[1;33m         xopt, retvals = func(objective, gradient, start_params, fargs, kwargs,\n\u001b[0m\u001b[0;32m    225\u001b[0m                             \u001b[0mdisp\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdisp\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmaxiter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmaxiter\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcallback\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    226\u001b[0m                             \u001b[0mretall\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mretall\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfull_output\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfull_output\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\base\\optimizer.py\u001b[0m in \u001b[0;36m_fit_newton\u001b[1;34m(f, score, start_params, fargs, kwargs, disp, maxiter, callback, retall, full_output, hess, ridge_factor)\u001b[0m\n\u001b[0;32m    424\u001b[0m             \u001b[0mhistory\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnewparams\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    425\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcallback\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 426\u001b[1;33m             \u001b[0mcallback\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnewparams\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    427\u001b[0m         \u001b[0miterations\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    428\u001b[0m     \u001b[0mfval\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnewparams\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0mfargs\u001b[0m\u001b[1;33m)\u001b[0m  \u001b[1;31m# this is the negative likelihood\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\discrete\\discrete_model.py\u001b[0m in \u001b[0;36m_check_perfect_pred\u001b[1;34m(self, params, *args)\u001b[0m\n\u001b[0;32m    209\u001b[0m                 np.allclose(fittedvalues - endog, 0)):\n\u001b[0;32m    210\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"Perfect separation detected, results not available\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 211\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mPerfectSeparationError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    212\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    213\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mAppender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbase\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mLikelihoodModel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__doc__\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mPerfectSeparationError\u001b[0m: Perfect separation detected, results not available"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "lr = sm.Logit(y_train, X_train).fit()\n",
    "print(lr.summary2())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "02e8ef37",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train=X_train[:,[False, False, False, False, True, False, True, False, False, False, False, False, False]]\n",
    "X_test=X_test[:,[False, False, False, False, True, False, True, False, False, False, False, False, False]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42f551af",
   "metadata": {},
   "source": [
    "# Parameters (Classification Tree)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "fa1b8695",
   "metadata": {},
   "outputs": [],
   "source": [
    "def max_leaf_nodes(X_train, X_test, y_train, y_test, n):\n",
    "    mse_train = []\n",
    "    mse_test = []\n",
    "    for i in n:\n",
    "        ct = DecisionTreeClassifier(max_leaf_nodes = i, random_state=10).fit(X_train, y_train)\n",
    "        mse_train.append(mean_squared_error(y_train, ct.predict(X_train)))\n",
    "        mse_test.append(mean_squared_error(y_test, ct.predict(X_test)))\n",
    "    fig, ax = plt.subplots(figsize=(8, 4))\n",
    "    ax.plot(n, mse_train, alpha=0.5, color='blue', label='train')\n",
    "    ax.plot(n, mse_test, alpha=0.5, color='red', label='test')\n",
    "    ax.set_ylabel(\"MSE\")\n",
    "    ax.set_xlabel(\"max_leaf_nodes\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "e4dafff7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import mean_squared_error\n",
    "max_leaf_nodes(X_train, X_test, y_train, y_test, [2, 4, 6, 8, 10])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e611d65",
   "metadata": {},
   "source": [
    "# Model (Classification Tree)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "008cdd77",
   "metadata": {},
   "outputs": [],
   "source": [
    "ct = DecisionTreeClassifier(max_leaf_nodes = 2, criterion = 'entropy', random_state = 10).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23eb151a",
   "metadata": {},
   "source": [
    "# Results "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "6e3778a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = ct.predict(X_test)\n",
    "ct.score(X_test,y_test).round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "34719d19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10  0]\n",
      " [ 0  4]]\n"
     ]
    }
   ],
   "source": [
    "# Making the Confusion Matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba1dffa4",
   "metadata": {},
   "source": [
    "# Visualisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "bc0820c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_test, y_test\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, ct.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('Classification Tree (Test set)')\n",
    "plt.xlabel('Количество чеков в месяц')\n",
    "plt.ylabel('Середній дохід наелення,грн')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b1a1bd5",
   "metadata": {},
   "source": [
    "# Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "1141632b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rf_best_n_estimator(X_train, X_test, y_train, y_test, n):\n",
    "    mse_train = []\n",
    "    mse_test = []\n",
    "    for i in n:\n",
    "        rf = RandomForestClassifier(n_estimators=i, random_state=10).fit(X_train, y_train)\n",
    "        mse_train.append(mean_squared_error(y_train, rf.predict(X_train)))\n",
    "        mse_test.append(mean_squared_error(y_test, rf.predict(X_test)))\n",
    "    \n",
    "    fig, ax = plt.subplots(figsize=(8, 4))\n",
    "    ax.plot(n, mse_train, alpha=0.5, color='blue', label='train')\n",
    "    ax.plot(n, mse_test, alpha=0.5, color='red', label='test')\n",
    "    ax.set_ylabel(\"MSE\")\n",
    "    ax.set_xlabel(\"N_estimators\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "c04a5f45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier    \n",
    "rf_best_n_estimator(X_train, X_test, y_train, y_test, [2, 5, 10, 15, 20])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "3ba72eae",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rf_max_leaf_nodes(X_train, X_test, y_train, y_test, n):\n",
    "    mse_train = []\n",
    "    mse_test = []\n",
    "    for i in n:\n",
    "        rf = RandomForestClassifier(n_estimators=2, max_leaf_nodes =i, random_state=10).fit(X_train, y_train)\n",
    "        mse_train.append(mean_squared_error(y_train, rf.predict(X_train)))\n",
    "        mse_test.append(mean_squared_error(y_test, rf.predict(X_test)))\n",
    "    \n",
    "    fig, ax = plt.subplots(figsize=(8, 4))\n",
    "    ax.plot(n, mse_train, alpha=0.5, color='blue', label='train')\n",
    "    ax.plot(n, mse_test, alpha=0.5, color='red', label='test')\n",
    "    ax.set_ylabel(\"MSE\")\n",
    "    ax.set_xlabel(\"max_leaf_nodes\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "05743f32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rf_max_leaf_nodes(X_train, X_test, y_train, y_test, [2, 4, 6, 8, 10])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efdb74ba",
   "metadata": {},
   "source": [
    "# Model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "f5eaac4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf = RandomForestClassifier(n_estimators = 2, max_leaf_nodes = 4, random_state = 10).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c60af93",
   "metadata": {},
   "source": [
    "# Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "7823a10f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.786"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = rf.predict(X_test)\n",
    "y_pred = (y_pred > 0.5)\n",
    "rf.score(X_test,y_test).round(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db1a834f",
   "metadata": {},
   "source": [
    "Точность модели - 78,6%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "842a6c4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[8 2]\n",
      " [1 3]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "a76d5ce5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_set, y_set = X_test, y_test\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, rf.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('Random Forest (Test set)')\n",
    "plt.xlabel('Количество чеков в месяц')\n",
    "plt.ylabel('Середній дохід наелення,грн')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4aa3d8f0",
   "metadata": {},
   "source": [
    "# CatBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "afa8a557",
   "metadata": {},
   "outputs": [],
   "source": [
    "def catboost_best_iterations(X_train, X_test, y_train, y_test, n):\n",
    "    mse_train = []\n",
    "    mse_test = []\n",
    "    for i in n:\n",
    "        catboost = CatBoostClassifier(iterations=i,random_state=10).fit(X_train, y_train,eval_set=(X_test, y_test),logging_level='Silent')\n",
    "        mse_train.append(mean_squared_error(y_train, catboost.predict(X_train)))\n",
    "        mse_test.append(mean_squared_error(y_test, catboost.predict(X_test)))\n",
    "    fig, ax = plt.subplots(figsize=(8, 4))\n",
    "    ax.plot(n, mse_train, alpha=0.5, color='blue', label='train')\n",
    "    ax.plot(n, mse_test, alpha=0.5, color='red', label='test')\n",
    "    ax.set_ylabel('\"MSE')\n",
    "    ax.set_xlabel('Iterations')\n",
    "    ax.legend(framealpha=1, frameon=True);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "580e9fce",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'catboost'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-126-b00c59f7ebe9>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mcatboost\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mCatBoostClassifier\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mcatboost_best_iterations\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m13\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'catboost'"
     ]
    }
   ],
   "source": [
    "from catboost import CatBoostClassifier\n",
    "catboost_best_iterations(X_train, X_test, y_train, y_test, list(range(1,13)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "f0458763",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'CatBoostClassifier' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-127-bb87d68664ab>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     13\u001b[0m     \u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mframealpha\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mframeon\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m;\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 15\u001b[1;33m \u001b[0mcatboost_max_depth\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m15\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m<ipython-input-127-bb87d68664ab>\u001b[0m in \u001b[0;36mcatboost_max_depth\u001b[1;34m(X_train, X_test, y_train, y_test, n)\u001b[0m\n\u001b[0;32m      3\u001b[0m     \u001b[0mmse_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mn\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m         \u001b[0mcatboost\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mCatBoostClassifier\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterations\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mmax_depth\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0meval_set\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlogging_level\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'Silent'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m         \u001b[0mmse_train\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmean_squared_error\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcatboost\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m         \u001b[0mmse_test\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmean_squared_error\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcatboost\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'CatBoostClassifier' is not defined"
     ]
    }
   ],
   "source": [
    "def catboost_max_depth(X_train, X_test, y_train, y_test, n):\n",
    "    mse_train = []\n",
    "    mse_test = []\n",
    "    for i in n:\n",
    "        catboost = CatBoostClassifier(iterations=4,max_depth=i,random_state=10).fit(X_train,y_train,eval_set=(X_test, y_test),logging_level='Silent')\n",
    "        mse_train.append(mean_squared_error(y_train, catboost.predict(X_train)))\n",
    "        mse_test.append(mean_squared_error(y_test, catboost.predict(X_test)))\n",
    "    fig, ax = plt.subplots(figsize=(8, 4))\n",
    "    ax.plot(n, mse_train, alpha=0.5, color='blue', label='train')\n",
    "    ax.plot(n, mse_test, alpha=0.5, color='red', label='test')\n",
    "    ax.set_ylabel(\"MSE\")\n",
    "    ax.set_xlabel(\"max_depth\")\n",
    "    ax.legend(framealpha=1, frameon=True);\n",
    "\n",
    "catboost_max_depth(X_train, X_test, y_train, y_test, list(range(1,15)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f40db76e",
   "metadata": {},
   "source": [
    "# Model (CatBoost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "f0e61b75",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'CatBoostClassifier' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-129-513b0ef68e17>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mcb\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mCatBoostClassifier\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterations\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mmax_depth\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0meval_set\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlogging_level\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'Silent'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'CatBoostClassifier' is not defined"
     ]
    }
   ],
   "source": [
    "cb = CatBoostClassifier(iterations=4,max_depth=3,random_state=10).fit(X_train, y_train,eval_set=(X_test, y_test),logging_level='Silent')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba39b723",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcc83ef2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
